package com.Study9;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * ClassName Study9_4
 *
 * @Date2025/3/614:32
 * @Create bysunlight
 */
public class Study9_4 {

    /**
     * 数据结构：
     *      1.栈：
     *          特点： 后进先出，先进后出
     *      2.队列:
     *          特点：先进先出，后进后出
     *      3.数组：
     *          查询速度快，（元素在内存中式连续存储的）   O（1）
     *          删除、添加效率低
     *      4.链表：
     *          链表中的结点是独立的对象，在内存中式不连续的，每个结点包含数据值和下一个结点的地址
     *          链表查询慢，无论查询那个数据都要从头开始找
     *          插入、删除快
     *      5.二叉树：
     *      6.二叉查找树：
     *      7.平衡二叉树：
     *          1.高度平衡
     *          2.当左右字数高度差超过1时，通过旋转保持平衡
     *      8.红黑树：.
     *          1.是一个二叉查找树
     *          2.但不是高度平衡的
     *          3.条件：特有的红黑规则：
     *              1.每一个节点或是红色的，或是黑色的
     *              2.根节点必须是黑色的
     *              3.如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点（Nil）是黑色的
     *              4.如果某一个节点是红色的，那么他的子节点必须是黑色（不能出现两个红色节点相连的情况）
     *              5.对每一个节点，从该节点到其所有的后代叶节点的简单路径上，均包含相同数目的黑色结点
     *
     *
     * ArrayList集合底层原理：
     *      1.利用空参创建的集合，在底层创建一个默认长度位0的数组
     *      2.添加第一个元素时，底层会创建一个新的长度位10的数组
     *      3.存满时，会扩容1.5倍。（新创建一个数组，将原来的数组元素数据复制到新数组当中去）
     *      4.如果一次添加多个元素时，1.5倍放不下，则新创建的数组的长度以实际长度为准
     *
     * LinkedList集合底层原理：
     *      1.底层数据结构是双链表，查询慢，增删快，但是如果操作的是首尾元素，速度也是很快
     */


    public static void main(String[] args) {
        ArrayList<String> strings = new ArrayList<>();
        strings.add("123");
    }

}
